// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?

  mangas    Manga[]
  favorites Favorite[]
  comments  Comment[]
  ratings   Rating[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
}

// for nextAuth
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_Token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Manga {
  id          String  @id @default(cuid())
  userId      String
  title       String
  author      String?
  description String?
  link        String?
  image       String?
  volume      Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  genres     Genre[]
  categories Category[]
  statuses   Status[]

  favorites Favorite[]
  comments  Comment[]
  ratings   Rating[]

  user User @relation(fields: [userId], references: [id])
}

model Favorite {
  id      String @id @default(cuid())
  userId  String
  mangaId String

  user      User     @relation(fields: [userId], references: [id])
  manga     Manga    @relation(fields: [mangaId], references: [id])
  createdAt DateTime @default(now())
}

model Rating {
  id      String @id @default(cuid())
  score   Int
  userId  String
  mangaId String

  user      User     @relation(fields: [userId], references: [id])
  manga     Manga    @relation(fields: [mangaId], references: [id])
  createdAt DateTime @default(now())
}

model Comment {
  id      String @id @default(cuid())
  content String
  userId  String
  mangaId String

  user      User     @relation(fields: [userId], references: [id])
  manga     Manga    @relation(fields: [mangaId], references: [id])
  createdAt DateTime @default(now())
}

enum Genre {
  BOYS_COMIC
  GIRLS_COMIC
}

enum Category {
  SCIENCE_FICTION
  FANTASY
  ROMANCE
  COMEDY
  HORROR
  MYSTERY
  HISTORY
  ACTION
  SPORTS
  OTHERS
}

enum Status {
  ONGOING
  COMPLETED
}
